
HSE_SYSCLK_8Mhz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002cdc  08002cdc  00003cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d90  08002d90  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d98  08002d98  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d9c  08002d9c  00003d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002da0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002dfc  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002dfc  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e17  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154e  00000000  00000000  0000bea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d7  00000000  00000000  0000da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ff9  00000000  00000000  0000df27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009500  00000000  00000000  0002ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e84  00000000  00000000  00038420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001002a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  001002e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001020e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002cc4 	.word	0x08002cc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002cc4 	.word	0x08002cc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:

#include "main_app.h"


void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 f9e2 	bl	800097c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f000 fb2e 	bl	8000c18 <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <main>:
uint8_t reception_complete = FALSE;



int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0ac      	sub	sp, #176	@ 0xb0
 80005c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	char msg[100];

	HAL_Init();
 80005c6:	f000 f987 	bl	80008d8 <HAL_Init>

	UART2_Init();
 80005ca:	f000 f87f 	bl	80006cc <UART2_Init>

	memset(&osc_init,0,sizeof(osc_init));
 80005ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80005d2:	2234      	movs	r2, #52	@ 0x34
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fef4 	bl	80023c4 <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    osc_init.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80005e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 ffff 	bl	80015f0 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <main+0x3c>
    {
    	Error_handler();
 80005f8:	f000 f88e 	bl	8000718 <Error_handler>
    }

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80005fc:	230f      	movs	r3, #15
 80005fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	66fb      	str	r3, [r7, #108]	@ 0x6c
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	673b      	str	r3, [r7, #112]	@ 0x70
    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	677b      	str	r3, [r7, #116]	@ 0x74
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	67bb      	str	r3, [r7, #120]	@ 0x78

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 8000614:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fc9e 	bl	8000f5c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x6a>
    {
    	Error_handler();
 8000626:	f000 f877 	bl	8000718 <Error_handler>
    }

 /*---------------------------- AFTER THIS LINE SYSCLK is SOURCED BY HSE------------------*/

    __HAL_RCC_HSI_DISABLE(); //Saves some current
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <main+0xac>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]

    /* LETS REDO THE SYSTICK CONFIGURATION */

     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000630:	f000 fd7a 	bl	8001128 <HAL_RCC_GetHCLKFreq>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <main+0xb0>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	099b      	lsrs	r3, r3, #6
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fac1 	bl	8000bc6 <HAL_SYSTICK_Config>

     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000644:	2004      	movs	r0, #4
 8000646:	f000 facb 	bl	8000be0 <HAL_SYSTICK_CLKSourceConfig>

     UART2_Init();
 800064a:	f000 f83f 	bl	80006cc <UART2_Init>
//
//	memset(msg,0,sizeof(msg));
//	sprintf(msg,"PCLK2  : %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
//	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

	menu();
 800064e:	f000 f817 	bl	8000680 <menu>
    while(reception_complete != TRUE)
 8000652:	e004      	b.n	800065e <main+0x9e>
    {
    	HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 8000654:	2201      	movs	r2, #1
 8000656:	4907      	ldr	r1, [pc, #28]	@ (8000674 <main+0xb4>)
 8000658:	4807      	ldr	r0, [pc, #28]	@ (8000678 <main+0xb8>)
 800065a:	f001 fb46 	bl	8001cea <HAL_UART_Receive_IT>
    while(reception_complete != TRUE)
 800065e:	4b07      	ldr	r3, [pc, #28]	@ (800067c <main+0xbc>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d1f6      	bne.n	8000654 <main+0x94>
    }

	while(1);
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0xa6>
 800066a:	bf00      	nop
 800066c:	42470000 	.word	0x42470000
 8000670:	10624dd3 	.word	0x10624dd3
 8000674:	200000bc 	.word	0x200000bc
 8000678:	20000078 	.word	0x20000078
 800067c:	200000bd 	.word	0x200000bd

08000680 <menu>:


}

void menu(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	@ 0x68
 8000684:	af00      	add	r7, sp, #0
	char buffer[100];

	memset(buffer, 0, sizeof(buffer) - 1);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2263      	movs	r2, #99	@ 0x63
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fe99 	bl	80023c4 <memset>
	buffer[sizeof(buffer) - 1] = '\0';
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	sprintf(buffer, "Welcome to select SYSCLK frequency\r\n\r\n"
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <menu+0x44>)
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fe71 	bl	8002384 <siprintf>
			"1. Press 1 for 4 MHz\r\n"
			"2. Press 2 for 8 MHz\r\n");

	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdb3 	bl	8000210 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <menu+0x48>)
 80006b6:	f001 fa86 	bl	8001bc6 <HAL_UART_Transmit>

}
 80006ba:	bf00      	nop
 80006bc:	3768      	adds	r7, #104	@ 0x68
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08002cf0 	.word	0x08002cf0
 80006c8:	20000078 	.word	0x20000078

080006cc <UART2_Init>:


void UART2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <UART2_Init+0x44>)
 80006d2:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <UART2_Init+0x48>)
 80006d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <UART2_Init+0x44>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <UART2_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <UART2_Init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <UART2_Init+0x44>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <UART2_Init+0x44>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <UART2_Init+0x44>)
 80006f8:	220c      	movs	r2, #12
 80006fa:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <UART2_Init+0x44>)
 80006fe:	f001 fa15 	bl	8001b2c <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000708:	f000 f806 	bl	8000718 <Error_handler>
	}


}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	40004400 	.word	0x40004400

08000718 <Error_handler>:


void Error_handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	while(1);
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_handler+0x4>

08000720 <HAL_MspInit>:


#include "main_app.h"

void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 fa19 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_MspInit+0x40>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072e:	4a0c      	ldr	r2, [pc, #48]	@ (8000760 <HAL_MspInit+0x40>)
 8000730:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000734:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f06f 000b 	mvn.w	r0, #11
 800073e:	f000 fa18 	bl	8000b72 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	f06f 000a 	mvn.w	r0, #10
 800074a:	f000 fa12 	bl	8000b72 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	f06f 0009 	mvn.w	r0, #9
 8000756:	f000 fa0c 	bl	8000b72 <HAL_NVIC_SetPriority>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <HAL_UART_MspInit+0x88>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	4a1d      	ldr	r2, [pc, #116]	@ (80007ec <HAL_UART_MspInit+0x88>)
 8000776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800077a:	6413      	str	r3, [r2, #64]	@ 0x40
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_UART_MspInit+0x88>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <HAL_UART_MspInit+0x88>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <HAL_UART_MspInit+0x88>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6313      	str	r3, [r2, #48]	@ 0x30
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <HAL_UART_MspInit+0x88>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80007a4:	2304      	movs	r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80007b4:	2307      	movs	r3, #7
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <HAL_UART_MspInit+0x8c>)
 80007c0:	f000 fa38 	bl	8000c34 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80007c4:	2308      	movs	r3, #8
 80007c6:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <HAL_UART_MspInit+0x8c>)
 80007d0:	f000 fa30 	bl	8000c34 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007d4:	2026      	movs	r0, #38	@ 0x26
 80007d6:	f000 f9e8 	bl	8000baa <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	2026      	movs	r0, #38	@ 0x26
 80007e0:	f000 f9c7 	bl	8000b72 <HAL_NVIC_SetPriority>

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f001 fdd6 	bl	80023d4 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20020000 	.word	0x20020000
 8000854:	00000400 	.word	0x00000400
 8000858:	200000c0 	.word	0x200000c0
 800085c:	20000210 	.word	0x20000210

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	@ (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	@ (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	@ (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f001 fd95 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe83 	bl	80005c0 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c8:	08002da0 	.word	0x08002da0
  ldr r2, =_sbss
 80008cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008d0:	20000210 	.word	0x20000210

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f92b 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff ff08 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f943 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f90b 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200000c4 	.word	0x200000c4

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000c4 	.word	0x200000c4

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d106      	bne.n	8000bfc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bfa:	e005      	b.n	8000c08 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c1c:	f000 f802 	bl	8000c24 <HAL_SYSTICK_Callback>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e165      	b.n	8000f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8154 	bne.w	8000f16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d017      	beq.n	8000d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80ae 	beq.w	8000f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a5c      	ldr	r2, [pc, #368]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b5a      	ldr	r3, [pc, #360]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a58      	ldr	r2, [pc, #352]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f3c <HAL_GPIO_Init+0x308>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d025      	beq.n	8000e4e <HAL_GPIO_Init+0x21a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <HAL_GPIO_Init+0x30c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d01f      	beq.n	8000e4a <HAL_GPIO_Init+0x216>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f44 <HAL_GPIO_Init+0x310>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d019      	beq.n	8000e46 <HAL_GPIO_Init+0x212>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x314>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x20e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f4c <HAL_GPIO_Init+0x318>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x20a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4a      	ldr	r2, [pc, #296]	@ (8000f50 <HAL_GPIO_Init+0x31c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x206>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a49      	ldr	r2, [pc, #292]	@ (8000f54 <HAL_GPIO_Init+0x320>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x202>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e92:	4a31      	ldr	r2, [pc, #196]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f10:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <HAL_GPIO_Init+0x324>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae96 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0cc      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f70:	4b68      	ldr	r3, [pc, #416]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d90c      	bls.n	8000f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7e:	4b65      	ldr	r3, [pc, #404]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0b8      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d020      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb0:	4b59      	ldr	r3, [pc, #356]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4a58      	ldr	r2, [pc, #352]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000fba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fc8:	4b53      	ldr	r3, [pc, #332]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a52      	ldr	r2, [pc, #328]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd4:	4b50      	ldr	r3, [pc, #320]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	494d      	ldr	r1, [pc, #308]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d044      	beq.n	800107c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d107      	bne.n	800100a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b47      	ldr	r3, [pc, #284]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d119      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e07f      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d003      	beq.n	800101a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001016:	2b03      	cmp	r3, #3
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4b3f      	ldr	r3, [pc, #252]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e06f      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e067      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800103a:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f023 0203 	bic.w	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4934      	ldr	r1, [pc, #208]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 8001048:	4313      	orrs	r3, r2
 800104a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800104c:	f7ff fcaa 	bl	80009a4 <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001052:	e00a      	b.n	800106a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001054:	f7ff fca6 	bl	80009a4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e04f      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106a:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 020c 	and.w	r2, r3, #12
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	429a      	cmp	r2, r3
 800107a:	d1eb      	bne.n	8001054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800107c:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d20c      	bcs.n	80010a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e032      	b.n	800110a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4916      	ldr	r1, [pc, #88]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d009      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	490e      	ldr	r1, [pc, #56]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e2:	f000 f855 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 80010e6:	4602      	mov	r2, r0
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	490a      	ldr	r1, [pc, #40]	@ (800111c <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	5ccb      	ldrb	r3, [r1, r3]
 80010f6:	fa22 f303 	lsr.w	r3, r2, r3
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_RCC_ClockConfig+0x1c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fc0a 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00
 8001118:	40023800 	.word	0x40023800
 800111c:	08002d44 	.word	0x08002d44
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_RCC_GetHCLKFreq+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000000 	.word	0x20000000

08001140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001144:	f7ff fff0 	bl	8001128 <HAL_RCC_GetHCLKFreq>
 8001148:	4602      	mov	r2, r0
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	0a9b      	lsrs	r3, r3, #10
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	4903      	ldr	r1, [pc, #12]	@ (8001164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001156:	5ccb      	ldrb	r3, [r1, r3]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	08002d54 	.word	0x08002d54

08001168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800116c:	f7ff ffdc 	bl	8001128 <HAL_RCC_GetHCLKFreq>
 8001170:	4602      	mov	r2, r0
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	0b5b      	lsrs	r3, r3, #13
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	4903      	ldr	r1, [pc, #12]	@ (800118c <HAL_RCC_GetPCLK2Freq+0x24>)
 800117e:	5ccb      	ldrb	r3, [r1, r3]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	08002d54 	.word	0x08002d54

08001190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001194:	b0ae      	sub	sp, #184	@ 0xb8
 8001196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b6:	4bcb      	ldr	r3, [pc, #812]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	f200 8206 	bhi.w	80015d0 <HAL_RCC_GetSysClockFreq+0x440>
 80011c4:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	08001201 	.word	0x08001201
 80011d0:	080015d1 	.word	0x080015d1
 80011d4:	080015d1 	.word	0x080015d1
 80011d8:	080015d1 	.word	0x080015d1
 80011dc:	08001209 	.word	0x08001209
 80011e0:	080015d1 	.word	0x080015d1
 80011e4:	080015d1 	.word	0x080015d1
 80011e8:	080015d1 	.word	0x080015d1
 80011ec:	08001211 	.word	0x08001211
 80011f0:	080015d1 	.word	0x080015d1
 80011f4:	080015d1 	.word	0x080015d1
 80011f8:	080015d1 	.word	0x080015d1
 80011fc:	08001401 	.word	0x08001401
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001200:	4bb9      	ldr	r3, [pc, #740]	@ (80014e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001206:	e1e7      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001208:	4bb8      	ldr	r3, [pc, #736]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800120e:	e1e3      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001210:	4bb4      	ldr	r3, [pc, #720]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800121c:	4bb1      	ldr	r3, [pc, #708]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d071      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001228:	4bae      	ldr	r3, [pc, #696]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	2200      	movs	r2, #0
 8001230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001234:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800123c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800124a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800124e:	4622      	mov	r2, r4
 8001250:	462b      	mov	r3, r5
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	0159      	lsls	r1, r3, #5
 800125c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001260:	0150      	lsls	r0, r2, #5
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4621      	mov	r1, r4
 8001268:	1a51      	subs	r1, r2, r1
 800126a:	6439      	str	r1, [r7, #64]	@ 0x40
 800126c:	4629      	mov	r1, r5
 800126e:	eb63 0301 	sbc.w	r3, r3, r1
 8001272:	647b      	str	r3, [r7, #68]	@ 0x44
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001280:	4649      	mov	r1, r9
 8001282:	018b      	lsls	r3, r1, #6
 8001284:	4641      	mov	r1, r8
 8001286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800128a:	4641      	mov	r1, r8
 800128c:	018a      	lsls	r2, r1, #6
 800128e:	4641      	mov	r1, r8
 8001290:	1a51      	subs	r1, r2, r1
 8001292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001294:	4649      	mov	r1, r9
 8001296:	eb63 0301 	sbc.w	r3, r3, r1
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80012a8:	4649      	mov	r1, r9
 80012aa:	00cb      	lsls	r3, r1, #3
 80012ac:	4641      	mov	r1, r8
 80012ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012b2:	4641      	mov	r1, r8
 80012b4:	00ca      	lsls	r2, r1, #3
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	4622      	mov	r2, r4
 80012be:	189b      	adds	r3, r3, r2
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80012c2:	462b      	mov	r3, r5
 80012c4:	460a      	mov	r2, r1
 80012c6:	eb42 0303 	adc.w	r3, r2, r3
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012d8:	4629      	mov	r1, r5
 80012da:	024b      	lsls	r3, r1, #9
 80012dc:	4621      	mov	r1, r4
 80012de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012e2:	4621      	mov	r1, r4
 80012e4:	024a      	lsls	r2, r1, #9
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ee:	2200      	movs	r2, #0
 80012f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012fc:	f7fe ffe0 	bl	80002c0 <__aeabi_uldivmod>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4613      	mov	r3, r2
 8001306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800130a:	e067      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800130c:	4b75      	ldr	r3, [pc, #468]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	2200      	movs	r2, #0
 8001314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001318:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800131c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001326:	2300      	movs	r3, #0
 8001328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800132a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800132e:	4622      	mov	r2, r4
 8001330:	462b      	mov	r3, r5
 8001332:	f04f 0000 	mov.w	r0, #0
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	0159      	lsls	r1, r3, #5
 800133c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001340:	0150      	lsls	r0, r2, #5
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4621      	mov	r1, r4
 8001348:	1a51      	subs	r1, r2, r1
 800134a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800134c:	4629      	mov	r1, r5
 800134e:	eb63 0301 	sbc.w	r3, r3, r1
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001360:	4649      	mov	r1, r9
 8001362:	018b      	lsls	r3, r1, #6
 8001364:	4641      	mov	r1, r8
 8001366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800136a:	4641      	mov	r1, r8
 800136c:	018a      	lsls	r2, r1, #6
 800136e:	4641      	mov	r1, r8
 8001370:	ebb2 0a01 	subs.w	sl, r2, r1
 8001374:	4649      	mov	r1, r9
 8001376:	eb63 0b01 	sbc.w	fp, r3, r1
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001386:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800138a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800138e:	4692      	mov	sl, r2
 8001390:	469b      	mov	fp, r3
 8001392:	4623      	mov	r3, r4
 8001394:	eb1a 0303 	adds.w	r3, sl, r3
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	462b      	mov	r3, r5
 800139c:	eb4b 0303 	adc.w	r3, fp, r3
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013ae:	4629      	mov	r1, r5
 80013b0:	028b      	lsls	r3, r1, #10
 80013b2:	4621      	mov	r1, r4
 80013b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013b8:	4621      	mov	r1, r4
 80013ba:	028a      	lsls	r2, r1, #10
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013c4:	2200      	movs	r2, #0
 80013c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80013c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80013ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013ce:	f7fe ff77 	bl	80002c0 <__aeabi_uldivmod>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4613      	mov	r3, r2
 80013d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013dc:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	3301      	adds	r3, #1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80013ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013fe:	e0eb      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001400:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06b      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	2200      	movs	r2, #0
 8001420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001422:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142a:	663b      	str	r3, [r7, #96]	@ 0x60
 800142c:	2300      	movs	r3, #0
 800142e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001430:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001434:	4622      	mov	r2, r4
 8001436:	462b      	mov	r3, r5
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	0159      	lsls	r1, r3, #5
 8001442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001446:	0150      	lsls	r0, r2, #5
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4621      	mov	r1, r4
 800144e:	1a51      	subs	r1, r2, r1
 8001450:	61b9      	str	r1, [r7, #24]
 8001452:	4629      	mov	r1, r5
 8001454:	eb63 0301 	sbc.w	r3, r3, r1
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001466:	4659      	mov	r1, fp
 8001468:	018b      	lsls	r3, r1, #6
 800146a:	4651      	mov	r1, sl
 800146c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001470:	4651      	mov	r1, sl
 8001472:	018a      	lsls	r2, r1, #6
 8001474:	4651      	mov	r1, sl
 8001476:	ebb2 0801 	subs.w	r8, r2, r1
 800147a:	4659      	mov	r1, fp
 800147c:	eb63 0901 	sbc.w	r9, r3, r1
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800148c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001490:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001494:	4690      	mov	r8, r2
 8001496:	4699      	mov	r9, r3
 8001498:	4623      	mov	r3, r4
 800149a:	eb18 0303 	adds.w	r3, r8, r3
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	462b      	mov	r3, r5
 80014a2:	eb49 0303 	adc.w	r3, r9, r3
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014b4:	4629      	mov	r1, r5
 80014b6:	024b      	lsls	r3, r1, #9
 80014b8:	4621      	mov	r1, r4
 80014ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014be:	4621      	mov	r1, r4
 80014c0:	024a      	lsls	r2, r1, #9
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ca:	2200      	movs	r2, #0
 80014cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014d4:	f7fe fef4 	bl	80002c0 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014e2:	e065      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x420>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	00f42400 	.word	0x00f42400
 80014ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	4611      	mov	r1, r2
 80014fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001500:	653b      	str	r3, [r7, #80]	@ 0x50
 8001502:	2300      	movs	r3, #0
 8001504:	657b      	str	r3, [r7, #84]	@ 0x54
 8001506:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800150a:	4642      	mov	r2, r8
 800150c:	464b      	mov	r3, r9
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0159      	lsls	r1, r3, #5
 8001518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800151c:	0150      	lsls	r0, r2, #5
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4641      	mov	r1, r8
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	4649      	mov	r1, r9
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800153c:	4659      	mov	r1, fp
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	4651      	mov	r1, sl
 8001542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001546:	4651      	mov	r1, sl
 8001548:	018a      	lsls	r2, r1, #6
 800154a:	4651      	mov	r1, sl
 800154c:	1a54      	subs	r4, r2, r1
 800154e:	4659      	mov	r1, fp
 8001550:	eb63 0501 	sbc.w	r5, r3, r1
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	00eb      	lsls	r3, r5, #3
 800155e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001562:	00e2      	lsls	r2, r4, #3
 8001564:	4614      	mov	r4, r2
 8001566:	461d      	mov	r5, r3
 8001568:	4643      	mov	r3, r8
 800156a:	18e3      	adds	r3, r4, r3
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	464b      	mov	r3, r9
 8001570:	eb45 0303 	adc.w	r3, r5, r3
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001582:	4629      	mov	r1, r5
 8001584:	028b      	lsls	r3, r1, #10
 8001586:	4621      	mov	r1, r4
 8001588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800158c:	4621      	mov	r1, r4
 800158e:	028a      	lsls	r2, r1, #10
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001598:	2200      	movs	r2, #0
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800159e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a2:	f7fe fe8d 	bl	80002c0 <__aeabi_uldivmod>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0f1b      	lsrs	r3, r3, #28
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80015be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ce:	e003      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	37b8      	adds	r7, #184	@ 0xb8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	00f42400 	.word	0x00f42400

080015f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e28d      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8083 	beq.w	8001716 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001610:	4b94      	ldr	r3, [pc, #592]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b04      	cmp	r3, #4
 800161a:	d019      	beq.n	8001650 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800161c:	4b91      	ldr	r3, [pc, #580]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001624:	2b08      	cmp	r3, #8
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001628:	4b8e      	ldr	r3, [pc, #568]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001634:	d00c      	beq.n	8001650 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b8b      	ldr	r3, [pc, #556]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d112      	bne.n	8001668 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4b88      	ldr	r3, [pc, #544]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b84      	ldr	r3, [pc, #528]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <HAL_RCC_OscConfig+0x124>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d157      	bne.n	8001714 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e25a      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x90>
 8001672:	4b7c      	ldr	r3, [pc, #496]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7b      	ldr	r2, [pc, #492]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xcc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0xb4>
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a72      	ldr	r2, [pc, #456]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xcc>
 80016a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff f96e 	bl	80009a4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff f96a 	bl	80009a4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e21f      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b61      	ldr	r3, [pc, #388]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xdc>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f95a 	bl	80009a4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff f956 	bl	80009a4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e20b      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x104>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06f      	beq.n	8001802 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001722:	4b50      	ldr	r3, [pc, #320]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d017      	beq.n	800175e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800172e:	4b4d      	ldr	r3, [pc, #308]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800173a:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d11c      	bne.n	800178c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001752:	4b44      	ldr	r3, [pc, #272]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x186>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e1d3      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4937      	ldr	r1, [pc, #220]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	e03a      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x278>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f903 	bl	80009a4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a2:	f7ff f8ff 	bl	80009a4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1b4      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4925      	ldr	r1, [pc, #148]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_RCC_OscConfig+0x278>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f8e2 	bl	80009a4 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff f8de 	bl	80009a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e193      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d036      	beq.n	800187c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_RCC_OscConfig+0x27c>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f8c2 	bl	80009a4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f8be 	bl	80009a4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e173      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_OscConfig+0x274>)
 8001838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x234>
 8001842:	e01b      	b.n	800187c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_RCC_OscConfig+0x27c>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff f8ab 	bl	80009a4 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	e00e      	b.n	8001870 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff f8a7 	bl	80009a4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d907      	bls.n	8001870 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e15c      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
 8001864:	40023800 	.word	0x40023800
 8001868:	42470000 	.word	0x42470000
 800186c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4b8a      	ldr	r3, [pc, #552]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ea      	bne.n	8001852 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8097 	beq.w	80019b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b83      	ldr	r3, [pc, #524]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b79      	ldr	r3, [pc, #484]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b0>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff f867 	bl	80009a4 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff f863 	bl	80009a4 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e118      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa0 <HAL_RCC_OscConfig+0x4b0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x31e>
 8001900:	4b66      	ldr	r3, [pc, #408]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	4a65      	ldr	r2, [pc, #404]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	@ 0x70
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x358>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x340>
 8001916:	4b61      	ldr	r3, [pc, #388]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191a:	4a60      	ldr	r2, [pc, #384]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6713      	str	r3, [r2, #112]	@ 0x70
 8001922:	4b5e      	ldr	r3, [pc, #376]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	4a5d      	ldr	r2, [pc, #372]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	@ 0x70
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x358>
 8001930:	4b5a      	ldr	r3, [pc, #360]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001934:	4a59      	ldr	r2, [pc, #356]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	@ 0x70
 800193c:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001940:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f828 	bl	80009a4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f824 	bl	80009a4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0d7      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0ee      	beq.n	8001958 <HAL_RCC_OscConfig+0x368>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f812 	bl	80009a4 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f80e 	bl	80009a4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0c1      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199a:	4b40      	ldr	r3, [pc, #256]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ee      	bne.n	8001984 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ad 	beq.w	8001b1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c2:	4b36      	ldr	r3, [pc, #216]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d060      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d145      	bne.n	8001a62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7fe ffe2 	bl	80009a4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7fe ffde 	bl	80009a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e093      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b29      	ldr	r3, [pc, #164]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	061b      	lsls	r3, r3, #24
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	071b      	lsls	r3, r3, #28
 8001a2e:	491b      	ldr	r1, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b4>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ffb3 	bl	80009a4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe ffaf 	bl	80009a4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e064      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x452>
 8001a60:	e05c      	b.n	8001b1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7fe ff9c 	bl	80009a4 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe ff98 	bl	80009a4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e04d      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x480>
 8001a8e:	e045      	b.n	8001b1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e040      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_RCC_OscConfig+0x538>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d030      	beq.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d129      	bne.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d122      	bne.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d119      	bne.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	3b01      	subs	r3, #1
 8001af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10f      	bne.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e03f      	b.n	8001bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe fe06 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	@ 0x24
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f993 	bl	8001e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b08a      	sub	sp, #40	@ 0x28
 8001bca:	af02      	add	r7, sp, #8
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d17c      	bne.n	8001ce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_UART_Transmit+0x2c>
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e075      	b.n	8001ce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Transmit+0x3e>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e06e      	b.n	8001ce2 <HAL_UART_Transmit+0x11c>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2221      	movs	r2, #33	@ 0x21
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c1a:	f7fe fec3 	bl	80009a4 <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c34:	d108      	bne.n	8001c48 <HAL_UART_Transmit+0x82>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d104      	bne.n	8001c48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	e003      	b.n	8001c50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001c58:	e02a      	b.n	8001cb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	@ 0x80
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f870 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e036      	b.n	8001ce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10b      	bne.n	8001c92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	e007      	b.n	8001ca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1cf      	bne.n	8001c5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2140      	movs	r1, #64	@ 0x40
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f840 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e006      	b.n	8001ce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d11d      	bne.n	8001d40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_UART_Receive_IT+0x26>
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e016      	b.n	8001d42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_UART_Receive_IT+0x38>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00f      	b.n	8001d42 <HAL_UART_Receive_IT+0x58>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f875 	bl	8001e26 <UART_Start_Receive_IT>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	e000      	b.n	8001d42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b090      	sub	sp, #64	@ 0x40
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5a:	e050      	b.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d04c      	beq.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	f7fe fe1b 	bl	80009a4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d241      	bcs.n	8001dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	e853 3f00 	ldrex	r3, [r3]
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	330c      	adds	r3, #12
 8001d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da2:	e841 2300 	strex	r3, r2, [r1]
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e5      	bne.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3314      	adds	r3, #20
 8001db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	e853 3f00 	ldrex	r3, [r3]
 8001dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3314      	adds	r3, #20
 8001dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dce:	623a      	str	r2, [r7, #32]
 8001dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	69f9      	ldr	r1, [r7, #28]
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	e841 2300 	strex	r3, r2, [r1]
 8001dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e5      	bne.n	8001dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e00f      	b.n	8001e1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4013      	ands	r3, r2
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d09f      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3740      	adds	r7, #64	@ 0x40
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2222      	movs	r2, #34	@ 0x22
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b0c0      	sub	sp, #256	@ 0x100
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	ea40 0301 	orr.w	r3, r0, r1
 8001ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ef4:	f021 010c 	bic.w	r1, r1, #12
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f02:	430b      	orrs	r3, r1
 8001f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f16:	6999      	ldr	r1, [r3, #24]
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	ea40 0301 	orr.w	r3, r0, r1
 8001f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b8f      	ldr	r3, [pc, #572]	@ (8002168 <UART_SetConfig+0x2cc>)
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d005      	beq.n	8001f3c <UART_SetConfig+0xa0>
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b8d      	ldr	r3, [pc, #564]	@ (800216c <UART_SetConfig+0x2d0>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d104      	bne.n	8001f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f3c:	f7ff f914 	bl	8001168 <HAL_RCC_GetPCLK2Freq>
 8001f40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f44:	e003      	b.n	8001f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f46:	f7ff f8fb 	bl	8001140 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f58:	f040 810c 	bne.w	8002174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f6e:	4622      	mov	r2, r4
 8001f70:	462b      	mov	r3, r5
 8001f72:	1891      	adds	r1, r2, r2
 8001f74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f76:	415b      	adcs	r3, r3
 8001f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f7e:	4621      	mov	r1, r4
 8001f80:	eb12 0801 	adds.w	r8, r2, r1
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb43 0901 	adc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001fac:	462b      	mov	r3, r5
 8001fae:	eb49 0303 	adc.w	r3, r9, r3
 8001fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001fca:	460b      	mov	r3, r1
 8001fcc:	18db      	adds	r3, r3, r3
 8001fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	eb42 0303 	adc.w	r3, r2, r3
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fe0:	f7fe f96e 	bl	80002c0 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4b61      	ldr	r3, [pc, #388]	@ (8002170 <UART_SetConfig+0x2d4>)
 8001fea:	fba3 2302 	umull	r2, r3, r3, r2
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	011c      	lsls	r4, r3, #4
 8001ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	1891      	adds	r1, r2, r2
 800200a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800200c:	415b      	adcs	r3, r3
 800200e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002014:	4641      	mov	r1, r8
 8002016:	eb12 0a01 	adds.w	sl, r2, r1
 800201a:	4649      	mov	r1, r9
 800201c:	eb43 0b01 	adc.w	fp, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800202c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002034:	4692      	mov	sl, r2
 8002036:	469b      	mov	fp, r3
 8002038:	4643      	mov	r3, r8
 800203a:	eb1a 0303 	adds.w	r3, sl, r3
 800203e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002042:	464b      	mov	r3, r9
 8002044:	eb4b 0303 	adc.w	r3, fp, r3
 8002048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002058:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800205c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002060:	460b      	mov	r3, r1
 8002062:	18db      	adds	r3, r3, r3
 8002064:	643b      	str	r3, [r7, #64]	@ 0x40
 8002066:	4613      	mov	r3, r2
 8002068:	eb42 0303 	adc.w	r3, r2, r3
 800206c:	647b      	str	r3, [r7, #68]	@ 0x44
 800206e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002076:	f7fe f923 	bl	80002c0 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4611      	mov	r1, r2
 8002080:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <UART_SetConfig+0x2d4>)
 8002082:	fba3 2301 	umull	r2, r3, r3, r1
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2264      	movs	r2, #100	@ 0x64
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	1acb      	subs	r3, r1, r3
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002096:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <UART_SetConfig+0x2d4>)
 8002098:	fba3 2302 	umull	r2, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80020a4:	441c      	add	r4, r3
 80020a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	1891      	adds	r1, r2, r2
 80020be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020c0:	415b      	adcs	r3, r3
 80020c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020c8:	4641      	mov	r1, r8
 80020ca:	1851      	adds	r1, r2, r1
 80020cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80020ce:	4649      	mov	r1, r9
 80020d0:	414b      	adcs	r3, r1
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80020e0:	4659      	mov	r1, fp
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	4651      	mov	r1, sl
 80020e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ea:	4651      	mov	r1, sl
 80020ec:	00ca      	lsls	r2, r1, #3
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	4642      	mov	r2, r8
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020fc:	464b      	mov	r3, r9
 80020fe:	460a      	mov	r2, r1
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002114:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800211c:	460b      	mov	r3, r1
 800211e:	18db      	adds	r3, r3, r3
 8002120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002122:	4613      	mov	r3, r2
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800212e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002132:	f7fe f8c5 	bl	80002c0 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <UART_SetConfig+0x2d4>)
 800213c:	fba3 1302 	umull	r1, r3, r3, r2
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	2164      	movs	r1, #100	@ 0x64
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	3332      	adds	r3, #50	@ 0x32
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <UART_SetConfig+0x2d4>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4422      	add	r2, r4
 8002162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002164:	e106      	b.n	8002374 <UART_SetConfig+0x4d8>
 8002166:	bf00      	nop
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002178:	2200      	movs	r2, #0
 800217a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800217e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002186:	4642      	mov	r2, r8
 8002188:	464b      	mov	r3, r9
 800218a:	1891      	adds	r1, r2, r2
 800218c:	6239      	str	r1, [r7, #32]
 800218e:	415b      	adcs	r3, r3
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
 8002192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002196:	4641      	mov	r1, r8
 8002198:	1854      	adds	r4, r2, r1
 800219a:	4649      	mov	r1, r9
 800219c:	eb43 0501 	adc.w	r5, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	00eb      	lsls	r3, r5, #3
 80021aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ae:	00e2      	lsls	r2, r4, #3
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	18e3      	adds	r3, r4, r3
 80021b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021bc:	464b      	mov	r3, r9
 80021be:	eb45 0303 	adc.w	r3, r5, r3
 80021c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021e2:	4629      	mov	r1, r5
 80021e4:	008b      	lsls	r3, r1, #2
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ec:	4621      	mov	r1, r4
 80021ee:	008a      	lsls	r2, r1, #2
 80021f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021f4:	f7fe f864 	bl	80002c0 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <UART_SetConfig+0x4e4>)
 80021fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	011c      	lsls	r4, r3, #4
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	61b9      	str	r1, [r7, #24]
 8002220:	415b      	adcs	r3, r3
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002228:	4641      	mov	r1, r8
 800222a:	1851      	adds	r1, r2, r1
 800222c:	6139      	str	r1, [r7, #16]
 800222e:	4649      	mov	r1, r9
 8002230:	414b      	adcs	r3, r1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002240:	4659      	mov	r1, fp
 8002242:	00cb      	lsls	r3, r1, #3
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224a:	4651      	mov	r1, sl
 800224c:	00ca      	lsls	r2, r1, #3
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	4603      	mov	r3, r0
 8002254:	4642      	mov	r2, r8
 8002256:	189b      	adds	r3, r3, r2
 8002258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800225c:	464b      	mov	r3, r9
 800225e:	460a      	mov	r2, r1
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002272:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002280:	4649      	mov	r1, r9
 8002282:	008b      	lsls	r3, r1, #2
 8002284:	4641      	mov	r1, r8
 8002286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800228a:	4641      	mov	r1, r8
 800228c:	008a      	lsls	r2, r1, #2
 800228e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002292:	f7fe f815 	bl	80002c0 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4611      	mov	r1, r2
 800229c:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <UART_SetConfig+0x4e4>)
 800229e:	fba3 2301 	umull	r2, r3, r3, r1
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2264      	movs	r2, #100	@ 0x64
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	1acb      	subs	r3, r1, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	@ 0x32
 80022b0:	4a33      	ldr	r2, [pc, #204]	@ (8002380 <UART_SetConfig+0x4e4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022bc:	441c      	add	r4, r3
 80022be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022c2:	2200      	movs	r2, #0
 80022c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80022c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80022c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	415b      	adcs	r3, r3
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800230e:	464b      	mov	r3, r9
 8002310:	460a      	mov	r2, r1
 8002312:	eb42 0303 	adc.w	r3, r2, r3
 8002316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	663b      	str	r3, [r7, #96]	@ 0x60
 8002322:	667a      	str	r2, [r7, #100]	@ 0x64
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002330:	4649      	mov	r1, r9
 8002332:	008b      	lsls	r3, r1, #2
 8002334:	4641      	mov	r1, r8
 8002336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233a:	4641      	mov	r1, r8
 800233c:	008a      	lsls	r2, r1, #2
 800233e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002342:	f7fd ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <UART_SetConfig+0x4e4>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	@ 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	3332      	adds	r3, #50	@ 0x32
 800235e:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <UART_SetConfig+0x4e4>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 020f 	and.w	r2, r3, #15
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4422      	add	r2, r4
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	bf00      	nop
 8002376:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800237a:	46bd      	mov	sp, r7
 800237c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002380:	51eb851f 	.word	0x51eb851f

08002384 <siprintf>:
 8002384:	b40e      	push	{r1, r2, r3}
 8002386:	b500      	push	{lr}
 8002388:	b09c      	sub	sp, #112	@ 0x70
 800238a:	ab1d      	add	r3, sp, #116	@ 0x74
 800238c:	9002      	str	r0, [sp, #8]
 800238e:	9006      	str	r0, [sp, #24]
 8002390:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002394:	4809      	ldr	r0, [pc, #36]	@ (80023bc <siprintf+0x38>)
 8002396:	9107      	str	r1, [sp, #28]
 8002398:	9104      	str	r1, [sp, #16]
 800239a:	4909      	ldr	r1, [pc, #36]	@ (80023c0 <siprintf+0x3c>)
 800239c:	f853 2b04 	ldr.w	r2, [r3], #4
 80023a0:	9105      	str	r1, [sp, #20]
 80023a2:	6800      	ldr	r0, [r0, #0]
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	a902      	add	r1, sp, #8
 80023a8:	f000 f994 	bl	80026d4 <_svfiprintf_r>
 80023ac:	9b02      	ldr	r3, [sp, #8]
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	b01c      	add	sp, #112	@ 0x70
 80023b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80023b8:	b003      	add	sp, #12
 80023ba:	4770      	bx	lr
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	ffff0208 	.word	0xffff0208

080023c4 <memset>:
 80023c4:	4402      	add	r2, r0
 80023c6:	4603      	mov	r3, r0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d100      	bne.n	80023ce <memset+0xa>
 80023cc:	4770      	bx	lr
 80023ce:	f803 1b01 	strb.w	r1, [r3], #1
 80023d2:	e7f9      	b.n	80023c8 <memset+0x4>

080023d4 <__errno>:
 80023d4:	4b01      	ldr	r3, [pc, #4]	@ (80023dc <__errno+0x8>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000000c 	.word	0x2000000c

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002418 <__libc_init_array+0x38>)
 80023e4:	4c0d      	ldr	r4, [pc, #52]	@ (800241c <__libc_init_array+0x3c>)
 80023e6:	1b64      	subs	r4, r4, r5
 80023e8:	10a4      	asrs	r4, r4, #2
 80023ea:	2600      	movs	r6, #0
 80023ec:	42a6      	cmp	r6, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002420 <__libc_init_array+0x40>)
 80023f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002424 <__libc_init_array+0x44>)
 80023f4:	f000 fc66 	bl	8002cc4 <_init>
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	2600      	movs	r6, #0
 80023fe:	42a6      	cmp	r6, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f855 3b04 	ldr.w	r3, [r5], #4
 8002408:	4798      	blx	r3
 800240a:	3601      	adds	r6, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002412:	4798      	blx	r3
 8002414:	3601      	adds	r6, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	08002d98 	.word	0x08002d98
 800241c:	08002d98 	.word	0x08002d98
 8002420:	08002d98 	.word	0x08002d98
 8002424:	08002d9c 	.word	0x08002d9c

08002428 <__retarget_lock_acquire_recursive>:
 8002428:	4770      	bx	lr

0800242a <__retarget_lock_release_recursive>:
 800242a:	4770      	bx	lr

0800242c <_free_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4605      	mov	r5, r0
 8002430:	2900      	cmp	r1, #0
 8002432:	d041      	beq.n	80024b8 <_free_r+0x8c>
 8002434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002438:	1f0c      	subs	r4, r1, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	18e4      	addlt	r4, r4, r3
 8002440:	f000 f8e0 	bl	8002604 <__malloc_lock>
 8002444:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <_free_r+0x90>)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	b933      	cbnz	r3, 8002458 <_free_r+0x2c>
 800244a:	6063      	str	r3, [r4, #4]
 800244c:	6014      	str	r4, [r2, #0]
 800244e:	4628      	mov	r0, r5
 8002450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002454:	f000 b8dc 	b.w	8002610 <__malloc_unlock>
 8002458:	42a3      	cmp	r3, r4
 800245a:	d908      	bls.n	800246e <_free_r+0x42>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428b      	cmp	r3, r1
 8002462:	bf01      	itttt	eq
 8002464:	6819      	ldreq	r1, [r3, #0]
 8002466:	685b      	ldreq	r3, [r3, #4]
 8002468:	1809      	addeq	r1, r1, r0
 800246a:	6021      	streq	r1, [r4, #0]
 800246c:	e7ed      	b.n	800244a <_free_r+0x1e>
 800246e:	461a      	mov	r2, r3
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b10b      	cbz	r3, 8002478 <_free_r+0x4c>
 8002474:	42a3      	cmp	r3, r4
 8002476:	d9fa      	bls.n	800246e <_free_r+0x42>
 8002478:	6811      	ldr	r1, [r2, #0]
 800247a:	1850      	adds	r0, r2, r1
 800247c:	42a0      	cmp	r0, r4
 800247e:	d10b      	bne.n	8002498 <_free_r+0x6c>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	4401      	add	r1, r0
 8002484:	1850      	adds	r0, r2, r1
 8002486:	4283      	cmp	r3, r0
 8002488:	6011      	str	r1, [r2, #0]
 800248a:	d1e0      	bne.n	800244e <_free_r+0x22>
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	4408      	add	r0, r1
 8002494:	6010      	str	r0, [r2, #0]
 8002496:	e7da      	b.n	800244e <_free_r+0x22>
 8002498:	d902      	bls.n	80024a0 <_free_r+0x74>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d6      	b.n	800244e <_free_r+0x22>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	1821      	adds	r1, r4, r0
 80024a4:	428b      	cmp	r3, r1
 80024a6:	bf04      	itt	eq
 80024a8:	6819      	ldreq	r1, [r3, #0]
 80024aa:	685b      	ldreq	r3, [r3, #4]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	bf04      	itt	eq
 80024b0:	1809      	addeq	r1, r1, r0
 80024b2:	6021      	streq	r1, [r4, #0]
 80024b4:	6054      	str	r4, [r2, #4]
 80024b6:	e7ca      	b.n	800244e <_free_r+0x22>
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	2000020c 	.word	0x2000020c

080024c0 <sbrk_aligned>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4e0f      	ldr	r6, [pc, #60]	@ (8002500 <sbrk_aligned+0x40>)
 80024c4:	460c      	mov	r4, r1
 80024c6:	6831      	ldr	r1, [r6, #0]
 80024c8:	4605      	mov	r5, r0
 80024ca:	b911      	cbnz	r1, 80024d2 <sbrk_aligned+0x12>
 80024cc:	f000 fba6 	bl	8002c1c <_sbrk_r>
 80024d0:	6030      	str	r0, [r6, #0]
 80024d2:	4621      	mov	r1, r4
 80024d4:	4628      	mov	r0, r5
 80024d6:	f000 fba1 	bl	8002c1c <_sbrk_r>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	d103      	bne.n	80024e6 <sbrk_aligned+0x26>
 80024de:	f04f 34ff 	mov.w	r4, #4294967295
 80024e2:	4620      	mov	r0, r4
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	1cc4      	adds	r4, r0, #3
 80024e8:	f024 0403 	bic.w	r4, r4, #3
 80024ec:	42a0      	cmp	r0, r4
 80024ee:	d0f8      	beq.n	80024e2 <sbrk_aligned+0x22>
 80024f0:	1a21      	subs	r1, r4, r0
 80024f2:	4628      	mov	r0, r5
 80024f4:	f000 fb92 	bl	8002c1c <_sbrk_r>
 80024f8:	3001      	adds	r0, #1
 80024fa:	d1f2      	bne.n	80024e2 <sbrk_aligned+0x22>
 80024fc:	e7ef      	b.n	80024de <sbrk_aligned+0x1e>
 80024fe:	bf00      	nop
 8002500:	20000208 	.word	0x20000208

08002504 <_malloc_r>:
 8002504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002508:	1ccd      	adds	r5, r1, #3
 800250a:	f025 0503 	bic.w	r5, r5, #3
 800250e:	3508      	adds	r5, #8
 8002510:	2d0c      	cmp	r5, #12
 8002512:	bf38      	it	cc
 8002514:	250c      	movcc	r5, #12
 8002516:	2d00      	cmp	r5, #0
 8002518:	4606      	mov	r6, r0
 800251a:	db01      	blt.n	8002520 <_malloc_r+0x1c>
 800251c:	42a9      	cmp	r1, r5
 800251e:	d904      	bls.n	800252a <_malloc_r+0x26>
 8002520:	230c      	movs	r3, #12
 8002522:	6033      	str	r3, [r6, #0]
 8002524:	2000      	movs	r0, #0
 8002526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800252a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002600 <_malloc_r+0xfc>
 800252e:	f000 f869 	bl	8002604 <__malloc_lock>
 8002532:	f8d8 3000 	ldr.w	r3, [r8]
 8002536:	461c      	mov	r4, r3
 8002538:	bb44      	cbnz	r4, 800258c <_malloc_r+0x88>
 800253a:	4629      	mov	r1, r5
 800253c:	4630      	mov	r0, r6
 800253e:	f7ff ffbf 	bl	80024c0 <sbrk_aligned>
 8002542:	1c43      	adds	r3, r0, #1
 8002544:	4604      	mov	r4, r0
 8002546:	d158      	bne.n	80025fa <_malloc_r+0xf6>
 8002548:	f8d8 4000 	ldr.w	r4, [r8]
 800254c:	4627      	mov	r7, r4
 800254e:	2f00      	cmp	r7, #0
 8002550:	d143      	bne.n	80025da <_malloc_r+0xd6>
 8002552:	2c00      	cmp	r4, #0
 8002554:	d04b      	beq.n	80025ee <_malloc_r+0xea>
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	4639      	mov	r1, r7
 800255a:	4630      	mov	r0, r6
 800255c:	eb04 0903 	add.w	r9, r4, r3
 8002560:	f000 fb5c 	bl	8002c1c <_sbrk_r>
 8002564:	4581      	cmp	r9, r0
 8002566:	d142      	bne.n	80025ee <_malloc_r+0xea>
 8002568:	6821      	ldr	r1, [r4, #0]
 800256a:	1a6d      	subs	r5, r5, r1
 800256c:	4629      	mov	r1, r5
 800256e:	4630      	mov	r0, r6
 8002570:	f7ff ffa6 	bl	80024c0 <sbrk_aligned>
 8002574:	3001      	adds	r0, #1
 8002576:	d03a      	beq.n	80025ee <_malloc_r+0xea>
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	442b      	add	r3, r5
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	f8d8 3000 	ldr.w	r3, [r8]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	bb62      	cbnz	r2, 80025e0 <_malloc_r+0xdc>
 8002586:	f8c8 7000 	str.w	r7, [r8]
 800258a:	e00f      	b.n	80025ac <_malloc_r+0xa8>
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	1b52      	subs	r2, r2, r5
 8002590:	d420      	bmi.n	80025d4 <_malloc_r+0xd0>
 8002592:	2a0b      	cmp	r2, #11
 8002594:	d917      	bls.n	80025c6 <_malloc_r+0xc2>
 8002596:	1961      	adds	r1, r4, r5
 8002598:	42a3      	cmp	r3, r4
 800259a:	6025      	str	r5, [r4, #0]
 800259c:	bf18      	it	ne
 800259e:	6059      	strne	r1, [r3, #4]
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	bf08      	it	eq
 80025a4:	f8c8 1000 	streq.w	r1, [r8]
 80025a8:	5162      	str	r2, [r4, r5]
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	4630      	mov	r0, r6
 80025ae:	f000 f82f 	bl	8002610 <__malloc_unlock>
 80025b2:	f104 000b 	add.w	r0, r4, #11
 80025b6:	1d23      	adds	r3, r4, #4
 80025b8:	f020 0007 	bic.w	r0, r0, #7
 80025bc:	1ac2      	subs	r2, r0, r3
 80025be:	bf1c      	itt	ne
 80025c0:	1a1b      	subne	r3, r3, r0
 80025c2:	50a3      	strne	r3, [r4, r2]
 80025c4:	e7af      	b.n	8002526 <_malloc_r+0x22>
 80025c6:	6862      	ldr	r2, [r4, #4]
 80025c8:	42a3      	cmp	r3, r4
 80025ca:	bf0c      	ite	eq
 80025cc:	f8c8 2000 	streq.w	r2, [r8]
 80025d0:	605a      	strne	r2, [r3, #4]
 80025d2:	e7eb      	b.n	80025ac <_malloc_r+0xa8>
 80025d4:	4623      	mov	r3, r4
 80025d6:	6864      	ldr	r4, [r4, #4]
 80025d8:	e7ae      	b.n	8002538 <_malloc_r+0x34>
 80025da:	463c      	mov	r4, r7
 80025dc:	687f      	ldr	r7, [r7, #4]
 80025de:	e7b6      	b.n	800254e <_malloc_r+0x4a>
 80025e0:	461a      	mov	r2, r3
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	42a3      	cmp	r3, r4
 80025e6:	d1fb      	bne.n	80025e0 <_malloc_r+0xdc>
 80025e8:	2300      	movs	r3, #0
 80025ea:	6053      	str	r3, [r2, #4]
 80025ec:	e7de      	b.n	80025ac <_malloc_r+0xa8>
 80025ee:	230c      	movs	r3, #12
 80025f0:	6033      	str	r3, [r6, #0]
 80025f2:	4630      	mov	r0, r6
 80025f4:	f000 f80c 	bl	8002610 <__malloc_unlock>
 80025f8:	e794      	b.n	8002524 <_malloc_r+0x20>
 80025fa:	6005      	str	r5, [r0, #0]
 80025fc:	e7d6      	b.n	80025ac <_malloc_r+0xa8>
 80025fe:	bf00      	nop
 8002600:	2000020c 	.word	0x2000020c

08002604 <__malloc_lock>:
 8002604:	4801      	ldr	r0, [pc, #4]	@ (800260c <__malloc_lock+0x8>)
 8002606:	f7ff bf0f 	b.w	8002428 <__retarget_lock_acquire_recursive>
 800260a:	bf00      	nop
 800260c:	20000204 	.word	0x20000204

08002610 <__malloc_unlock>:
 8002610:	4801      	ldr	r0, [pc, #4]	@ (8002618 <__malloc_unlock+0x8>)
 8002612:	f7ff bf0a 	b.w	800242a <__retarget_lock_release_recursive>
 8002616:	bf00      	nop
 8002618:	20000204 	.word	0x20000204

0800261c <__ssputs_r>:
 800261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	688e      	ldr	r6, [r1, #8]
 8002622:	461f      	mov	r7, r3
 8002624:	42be      	cmp	r6, r7
 8002626:	680b      	ldr	r3, [r1, #0]
 8002628:	4682      	mov	sl, r0
 800262a:	460c      	mov	r4, r1
 800262c:	4690      	mov	r8, r2
 800262e:	d82d      	bhi.n	800268c <__ssputs_r+0x70>
 8002630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002638:	d026      	beq.n	8002688 <__ssputs_r+0x6c>
 800263a:	6965      	ldr	r5, [r4, #20]
 800263c:	6909      	ldr	r1, [r1, #16]
 800263e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002642:	eba3 0901 	sub.w	r9, r3, r1
 8002646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800264a:	1c7b      	adds	r3, r7, #1
 800264c:	444b      	add	r3, r9
 800264e:	106d      	asrs	r5, r5, #1
 8002650:	429d      	cmp	r5, r3
 8002652:	bf38      	it	cc
 8002654:	461d      	movcc	r5, r3
 8002656:	0553      	lsls	r3, r2, #21
 8002658:	d527      	bpl.n	80026aa <__ssputs_r+0x8e>
 800265a:	4629      	mov	r1, r5
 800265c:	f7ff ff52 	bl	8002504 <_malloc_r>
 8002660:	4606      	mov	r6, r0
 8002662:	b360      	cbz	r0, 80026be <__ssputs_r+0xa2>
 8002664:	6921      	ldr	r1, [r4, #16]
 8002666:	464a      	mov	r2, r9
 8002668:	f000 fae8 	bl	8002c3c <memcpy>
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002676:	81a3      	strh	r3, [r4, #12]
 8002678:	6126      	str	r6, [r4, #16]
 800267a:	6165      	str	r5, [r4, #20]
 800267c:	444e      	add	r6, r9
 800267e:	eba5 0509 	sub.w	r5, r5, r9
 8002682:	6026      	str	r6, [r4, #0]
 8002684:	60a5      	str	r5, [r4, #8]
 8002686:	463e      	mov	r6, r7
 8002688:	42be      	cmp	r6, r7
 800268a:	d900      	bls.n	800268e <__ssputs_r+0x72>
 800268c:	463e      	mov	r6, r7
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	4632      	mov	r2, r6
 8002692:	4641      	mov	r1, r8
 8002694:	f000 faa8 	bl	8002be8 <memmove>
 8002698:	68a3      	ldr	r3, [r4, #8]
 800269a:	1b9b      	subs	r3, r3, r6
 800269c:	60a3      	str	r3, [r4, #8]
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	4433      	add	r3, r6
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	2000      	movs	r0, #0
 80026a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026aa:	462a      	mov	r2, r5
 80026ac:	f000 fad4 	bl	8002c58 <_realloc_r>
 80026b0:	4606      	mov	r6, r0
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d1e0      	bne.n	8002678 <__ssputs_r+0x5c>
 80026b6:	6921      	ldr	r1, [r4, #16]
 80026b8:	4650      	mov	r0, sl
 80026ba:	f7ff feb7 	bl	800242c <_free_r>
 80026be:	230c      	movs	r3, #12
 80026c0:	f8ca 3000 	str.w	r3, [sl]
 80026c4:	89a3      	ldrh	r3, [r4, #12]
 80026c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ca:	81a3      	strh	r3, [r4, #12]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	e7e9      	b.n	80026a6 <__ssputs_r+0x8a>
	...

080026d4 <_svfiprintf_r>:
 80026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d8:	4698      	mov	r8, r3
 80026da:	898b      	ldrh	r3, [r1, #12]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	b09d      	sub	sp, #116	@ 0x74
 80026e0:	4607      	mov	r7, r0
 80026e2:	460d      	mov	r5, r1
 80026e4:	4614      	mov	r4, r2
 80026e6:	d510      	bpl.n	800270a <_svfiprintf_r+0x36>
 80026e8:	690b      	ldr	r3, [r1, #16]
 80026ea:	b973      	cbnz	r3, 800270a <_svfiprintf_r+0x36>
 80026ec:	2140      	movs	r1, #64	@ 0x40
 80026ee:	f7ff ff09 	bl	8002504 <_malloc_r>
 80026f2:	6028      	str	r0, [r5, #0]
 80026f4:	6128      	str	r0, [r5, #16]
 80026f6:	b930      	cbnz	r0, 8002706 <_svfiprintf_r+0x32>
 80026f8:	230c      	movs	r3, #12
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	b01d      	add	sp, #116	@ 0x74
 8002702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002706:	2340      	movs	r3, #64	@ 0x40
 8002708:	616b      	str	r3, [r5, #20]
 800270a:	2300      	movs	r3, #0
 800270c:	9309      	str	r3, [sp, #36]	@ 0x24
 800270e:	2320      	movs	r3, #32
 8002710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002714:	f8cd 800c 	str.w	r8, [sp, #12]
 8002718:	2330      	movs	r3, #48	@ 0x30
 800271a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80028b8 <_svfiprintf_r+0x1e4>
 800271e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002722:	f04f 0901 	mov.w	r9, #1
 8002726:	4623      	mov	r3, r4
 8002728:	469a      	mov	sl, r3
 800272a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800272e:	b10a      	cbz	r2, 8002734 <_svfiprintf_r+0x60>
 8002730:	2a25      	cmp	r2, #37	@ 0x25
 8002732:	d1f9      	bne.n	8002728 <_svfiprintf_r+0x54>
 8002734:	ebba 0b04 	subs.w	fp, sl, r4
 8002738:	d00b      	beq.n	8002752 <_svfiprintf_r+0x7e>
 800273a:	465b      	mov	r3, fp
 800273c:	4622      	mov	r2, r4
 800273e:	4629      	mov	r1, r5
 8002740:	4638      	mov	r0, r7
 8002742:	f7ff ff6b 	bl	800261c <__ssputs_r>
 8002746:	3001      	adds	r0, #1
 8002748:	f000 80a7 	beq.w	800289a <_svfiprintf_r+0x1c6>
 800274c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800274e:	445a      	add	r2, fp
 8002750:	9209      	str	r2, [sp, #36]	@ 0x24
 8002752:	f89a 3000 	ldrb.w	r3, [sl]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 809f 	beq.w	800289a <_svfiprintf_r+0x1c6>
 800275c:	2300      	movs	r3, #0
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002766:	f10a 0a01 	add.w	sl, sl, #1
 800276a:	9304      	str	r3, [sp, #16]
 800276c:	9307      	str	r3, [sp, #28]
 800276e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002772:	931a      	str	r3, [sp, #104]	@ 0x68
 8002774:	4654      	mov	r4, sl
 8002776:	2205      	movs	r2, #5
 8002778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277c:	484e      	ldr	r0, [pc, #312]	@ (80028b8 <_svfiprintf_r+0x1e4>)
 800277e:	f7fd fd4f 	bl	8000220 <memchr>
 8002782:	9a04      	ldr	r2, [sp, #16]
 8002784:	b9d8      	cbnz	r0, 80027be <_svfiprintf_r+0xea>
 8002786:	06d0      	lsls	r0, r2, #27
 8002788:	bf44      	itt	mi
 800278a:	2320      	movmi	r3, #32
 800278c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002790:	0711      	lsls	r1, r2, #28
 8002792:	bf44      	itt	mi
 8002794:	232b      	movmi	r3, #43	@ 0x2b
 8002796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800279a:	f89a 3000 	ldrb.w	r3, [sl]
 800279e:	2b2a      	cmp	r3, #42	@ 0x2a
 80027a0:	d015      	beq.n	80027ce <_svfiprintf_r+0xfa>
 80027a2:	9a07      	ldr	r2, [sp, #28]
 80027a4:	4654      	mov	r4, sl
 80027a6:	2000      	movs	r0, #0
 80027a8:	f04f 0c0a 	mov.w	ip, #10
 80027ac:	4621      	mov	r1, r4
 80027ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027b2:	3b30      	subs	r3, #48	@ 0x30
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d94b      	bls.n	8002850 <_svfiprintf_r+0x17c>
 80027b8:	b1b0      	cbz	r0, 80027e8 <_svfiprintf_r+0x114>
 80027ba:	9207      	str	r2, [sp, #28]
 80027bc:	e014      	b.n	80027e8 <_svfiprintf_r+0x114>
 80027be:	eba0 0308 	sub.w	r3, r0, r8
 80027c2:	fa09 f303 	lsl.w	r3, r9, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	9304      	str	r3, [sp, #16]
 80027ca:	46a2      	mov	sl, r4
 80027cc:	e7d2      	b.n	8002774 <_svfiprintf_r+0xa0>
 80027ce:	9b03      	ldr	r3, [sp, #12]
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	9103      	str	r1, [sp, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bfbb      	ittet	lt
 80027da:	425b      	neglt	r3, r3
 80027dc:	f042 0202 	orrlt.w	r2, r2, #2
 80027e0:	9307      	strge	r3, [sp, #28]
 80027e2:	9307      	strlt	r3, [sp, #28]
 80027e4:	bfb8      	it	lt
 80027e6:	9204      	strlt	r2, [sp, #16]
 80027e8:	7823      	ldrb	r3, [r4, #0]
 80027ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ec:	d10a      	bne.n	8002804 <_svfiprintf_r+0x130>
 80027ee:	7863      	ldrb	r3, [r4, #1]
 80027f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80027f2:	d132      	bne.n	800285a <_svfiprintf_r+0x186>
 80027f4:	9b03      	ldr	r3, [sp, #12]
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	9203      	str	r2, [sp, #12]
 80027fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002800:	3402      	adds	r4, #2
 8002802:	9305      	str	r3, [sp, #20]
 8002804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80028c8 <_svfiprintf_r+0x1f4>
 8002808:	7821      	ldrb	r1, [r4, #0]
 800280a:	2203      	movs	r2, #3
 800280c:	4650      	mov	r0, sl
 800280e:	f7fd fd07 	bl	8000220 <memchr>
 8002812:	b138      	cbz	r0, 8002824 <_svfiprintf_r+0x150>
 8002814:	9b04      	ldr	r3, [sp, #16]
 8002816:	eba0 000a 	sub.w	r0, r0, sl
 800281a:	2240      	movs	r2, #64	@ 0x40
 800281c:	4082      	lsls	r2, r0
 800281e:	4313      	orrs	r3, r2
 8002820:	3401      	adds	r4, #1
 8002822:	9304      	str	r3, [sp, #16]
 8002824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002828:	4824      	ldr	r0, [pc, #144]	@ (80028bc <_svfiprintf_r+0x1e8>)
 800282a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800282e:	2206      	movs	r2, #6
 8002830:	f7fd fcf6 	bl	8000220 <memchr>
 8002834:	2800      	cmp	r0, #0
 8002836:	d036      	beq.n	80028a6 <_svfiprintf_r+0x1d2>
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <_svfiprintf_r+0x1ec>)
 800283a:	bb1b      	cbnz	r3, 8002884 <_svfiprintf_r+0x1b0>
 800283c:	9b03      	ldr	r3, [sp, #12]
 800283e:	3307      	adds	r3, #7
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	3308      	adds	r3, #8
 8002846:	9303      	str	r3, [sp, #12]
 8002848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800284a:	4433      	add	r3, r6
 800284c:	9309      	str	r3, [sp, #36]	@ 0x24
 800284e:	e76a      	b.n	8002726 <_svfiprintf_r+0x52>
 8002850:	fb0c 3202 	mla	r2, ip, r2, r3
 8002854:	460c      	mov	r4, r1
 8002856:	2001      	movs	r0, #1
 8002858:	e7a8      	b.n	80027ac <_svfiprintf_r+0xd8>
 800285a:	2300      	movs	r3, #0
 800285c:	3401      	adds	r4, #1
 800285e:	9305      	str	r3, [sp, #20]
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 0c0a 	mov.w	ip, #10
 8002866:	4620      	mov	r0, r4
 8002868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800286c:	3a30      	subs	r2, #48	@ 0x30
 800286e:	2a09      	cmp	r2, #9
 8002870:	d903      	bls.n	800287a <_svfiprintf_r+0x1a6>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0c6      	beq.n	8002804 <_svfiprintf_r+0x130>
 8002876:	9105      	str	r1, [sp, #20]
 8002878:	e7c4      	b.n	8002804 <_svfiprintf_r+0x130>
 800287a:	fb0c 2101 	mla	r1, ip, r1, r2
 800287e:	4604      	mov	r4, r0
 8002880:	2301      	movs	r3, #1
 8002882:	e7f0      	b.n	8002866 <_svfiprintf_r+0x192>
 8002884:	ab03      	add	r3, sp, #12
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	462a      	mov	r2, r5
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <_svfiprintf_r+0x1f0>)
 800288c:	a904      	add	r1, sp, #16
 800288e:	4638      	mov	r0, r7
 8002890:	f3af 8000 	nop.w
 8002894:	1c42      	adds	r2, r0, #1
 8002896:	4606      	mov	r6, r0
 8002898:	d1d6      	bne.n	8002848 <_svfiprintf_r+0x174>
 800289a:	89ab      	ldrh	r3, [r5, #12]
 800289c:	065b      	lsls	r3, r3, #25
 800289e:	f53f af2d 	bmi.w	80026fc <_svfiprintf_r+0x28>
 80028a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028a4:	e72c      	b.n	8002700 <_svfiprintf_r+0x2c>
 80028a6:	ab03      	add	r3, sp, #12
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	462a      	mov	r2, r5
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <_svfiprintf_r+0x1f0>)
 80028ae:	a904      	add	r1, sp, #16
 80028b0:	4638      	mov	r0, r7
 80028b2:	f000 f879 	bl	80029a8 <_printf_i>
 80028b6:	e7ed      	b.n	8002894 <_svfiprintf_r+0x1c0>
 80028b8:	08002d5c 	.word	0x08002d5c
 80028bc:	08002d66 	.word	0x08002d66
 80028c0:	00000000 	.word	0x00000000
 80028c4:	0800261d 	.word	0x0800261d
 80028c8:	08002d62 	.word	0x08002d62

080028cc <_printf_common>:
 80028cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d0:	4616      	mov	r6, r2
 80028d2:	4698      	mov	r8, r3
 80028d4:	688a      	ldr	r2, [r1, #8]
 80028d6:	690b      	ldr	r3, [r1, #16]
 80028d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028dc:	4293      	cmp	r3, r2
 80028de:	bfb8      	it	lt
 80028e0:	4613      	movlt	r3, r2
 80028e2:	6033      	str	r3, [r6, #0]
 80028e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028e8:	4607      	mov	r7, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	b10a      	cbz	r2, 80028f2 <_printf_common+0x26>
 80028ee:	3301      	adds	r3, #1
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	0699      	lsls	r1, r3, #26
 80028f6:	bf42      	ittt	mi
 80028f8:	6833      	ldrmi	r3, [r6, #0]
 80028fa:	3302      	addmi	r3, #2
 80028fc:	6033      	strmi	r3, [r6, #0]
 80028fe:	6825      	ldr	r5, [r4, #0]
 8002900:	f015 0506 	ands.w	r5, r5, #6
 8002904:	d106      	bne.n	8002914 <_printf_common+0x48>
 8002906:	f104 0a19 	add.w	sl, r4, #25
 800290a:	68e3      	ldr	r3, [r4, #12]
 800290c:	6832      	ldr	r2, [r6, #0]
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	42ab      	cmp	r3, r5
 8002912:	dc26      	bgt.n	8002962 <_printf_common+0x96>
 8002914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	3b00      	subs	r3, #0
 800291c:	bf18      	it	ne
 800291e:	2301      	movne	r3, #1
 8002920:	0692      	lsls	r2, r2, #26
 8002922:	d42b      	bmi.n	800297c <_printf_common+0xb0>
 8002924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002928:	4641      	mov	r1, r8
 800292a:	4638      	mov	r0, r7
 800292c:	47c8      	blx	r9
 800292e:	3001      	adds	r0, #1
 8002930:	d01e      	beq.n	8002970 <_printf_common+0xa4>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	6922      	ldr	r2, [r4, #16]
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf02      	ittt	eq
 800293e:	68e5      	ldreq	r5, [r4, #12]
 8002940:	6833      	ldreq	r3, [r6, #0]
 8002942:	1aed      	subeq	r5, r5, r3
 8002944:	68a3      	ldr	r3, [r4, #8]
 8002946:	bf0c      	ite	eq
 8002948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800294c:	2500      	movne	r5, #0
 800294e:	4293      	cmp	r3, r2
 8002950:	bfc4      	itt	gt
 8002952:	1a9b      	subgt	r3, r3, r2
 8002954:	18ed      	addgt	r5, r5, r3
 8002956:	2600      	movs	r6, #0
 8002958:	341a      	adds	r4, #26
 800295a:	42b5      	cmp	r5, r6
 800295c:	d11a      	bne.n	8002994 <_printf_common+0xc8>
 800295e:	2000      	movs	r0, #0
 8002960:	e008      	b.n	8002974 <_printf_common+0xa8>
 8002962:	2301      	movs	r3, #1
 8002964:	4652      	mov	r2, sl
 8002966:	4641      	mov	r1, r8
 8002968:	4638      	mov	r0, r7
 800296a:	47c8      	blx	r9
 800296c:	3001      	adds	r0, #1
 800296e:	d103      	bne.n	8002978 <_printf_common+0xac>
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002978:	3501      	adds	r5, #1
 800297a:	e7c6      	b.n	800290a <_printf_common+0x3e>
 800297c:	18e1      	adds	r1, r4, r3
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	2030      	movs	r0, #48	@ 0x30
 8002982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002986:	4422      	add	r2, r4
 8002988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800298c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002990:	3302      	adds	r3, #2
 8002992:	e7c7      	b.n	8002924 <_printf_common+0x58>
 8002994:	2301      	movs	r3, #1
 8002996:	4622      	mov	r2, r4
 8002998:	4641      	mov	r1, r8
 800299a:	4638      	mov	r0, r7
 800299c:	47c8      	blx	r9
 800299e:	3001      	adds	r0, #1
 80029a0:	d0e6      	beq.n	8002970 <_printf_common+0xa4>
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7d9      	b.n	800295a <_printf_common+0x8e>
	...

080029a8 <_printf_i>:
 80029a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	7e0f      	ldrb	r7, [r1, #24]
 80029ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029b0:	2f78      	cmp	r7, #120	@ 0x78
 80029b2:	4691      	mov	r9, r2
 80029b4:	4680      	mov	r8, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	469a      	mov	sl, r3
 80029ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029be:	d807      	bhi.n	80029d0 <_printf_i+0x28>
 80029c0:	2f62      	cmp	r7, #98	@ 0x62
 80029c2:	d80a      	bhi.n	80029da <_printf_i+0x32>
 80029c4:	2f00      	cmp	r7, #0
 80029c6:	f000 80d2 	beq.w	8002b6e <_printf_i+0x1c6>
 80029ca:	2f58      	cmp	r7, #88	@ 0x58
 80029cc:	f000 80b9 	beq.w	8002b42 <_printf_i+0x19a>
 80029d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029d8:	e03a      	b.n	8002a50 <_printf_i+0xa8>
 80029da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029de:	2b15      	cmp	r3, #21
 80029e0:	d8f6      	bhi.n	80029d0 <_printf_i+0x28>
 80029e2:	a101      	add	r1, pc, #4	@ (adr r1, 80029e8 <_printf_i+0x40>)
 80029e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029e8:	08002a41 	.word	0x08002a41
 80029ec:	08002a55 	.word	0x08002a55
 80029f0:	080029d1 	.word	0x080029d1
 80029f4:	080029d1 	.word	0x080029d1
 80029f8:	080029d1 	.word	0x080029d1
 80029fc:	080029d1 	.word	0x080029d1
 8002a00:	08002a55 	.word	0x08002a55
 8002a04:	080029d1 	.word	0x080029d1
 8002a08:	080029d1 	.word	0x080029d1
 8002a0c:	080029d1 	.word	0x080029d1
 8002a10:	080029d1 	.word	0x080029d1
 8002a14:	08002b55 	.word	0x08002b55
 8002a18:	08002a7f 	.word	0x08002a7f
 8002a1c:	08002b0f 	.word	0x08002b0f
 8002a20:	080029d1 	.word	0x080029d1
 8002a24:	080029d1 	.word	0x080029d1
 8002a28:	08002b77 	.word	0x08002b77
 8002a2c:	080029d1 	.word	0x080029d1
 8002a30:	08002a7f 	.word	0x08002a7f
 8002a34:	080029d1 	.word	0x080029d1
 8002a38:	080029d1 	.word	0x080029d1
 8002a3c:	08002b17 	.word	0x08002b17
 8002a40:	6833      	ldr	r3, [r6, #0]
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6032      	str	r2, [r6, #0]
 8002a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a50:	2301      	movs	r3, #1
 8002a52:	e09d      	b.n	8002b90 <_printf_i+0x1e8>
 8002a54:	6833      	ldr	r3, [r6, #0]
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	1d19      	adds	r1, r3, #4
 8002a5a:	6031      	str	r1, [r6, #0]
 8002a5c:	0606      	lsls	r6, r0, #24
 8002a5e:	d501      	bpl.n	8002a64 <_printf_i+0xbc>
 8002a60:	681d      	ldr	r5, [r3, #0]
 8002a62:	e003      	b.n	8002a6c <_printf_i+0xc4>
 8002a64:	0645      	lsls	r5, r0, #25
 8002a66:	d5fb      	bpl.n	8002a60 <_printf_i+0xb8>
 8002a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	da03      	bge.n	8002a78 <_printf_i+0xd0>
 8002a70:	232d      	movs	r3, #45	@ 0x2d
 8002a72:	426d      	negs	r5, r5
 8002a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a78:	4859      	ldr	r0, [pc, #356]	@ (8002be0 <_printf_i+0x238>)
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	e011      	b.n	8002aa2 <_printf_i+0xfa>
 8002a7e:	6821      	ldr	r1, [r4, #0]
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	0608      	lsls	r0, r1, #24
 8002a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a88:	d402      	bmi.n	8002a90 <_printf_i+0xe8>
 8002a8a:	0649      	lsls	r1, r1, #25
 8002a8c:	bf48      	it	mi
 8002a8e:	b2ad      	uxthmi	r5, r5
 8002a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a92:	4853      	ldr	r0, [pc, #332]	@ (8002be0 <_printf_i+0x238>)
 8002a94:	6033      	str	r3, [r6, #0]
 8002a96:	bf14      	ite	ne
 8002a98:	230a      	movne	r3, #10
 8002a9a:	2308      	moveq	r3, #8
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002aa2:	6866      	ldr	r6, [r4, #4]
 8002aa4:	60a6      	str	r6, [r4, #8]
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	bfa2      	ittt	ge
 8002aaa:	6821      	ldrge	r1, [r4, #0]
 8002aac:	f021 0104 	bicge.w	r1, r1, #4
 8002ab0:	6021      	strge	r1, [r4, #0]
 8002ab2:	b90d      	cbnz	r5, 8002ab8 <_printf_i+0x110>
 8002ab4:	2e00      	cmp	r6, #0
 8002ab6:	d04b      	beq.n	8002b50 <_printf_i+0x1a8>
 8002ab8:	4616      	mov	r6, r2
 8002aba:	fbb5 f1f3 	udiv	r1, r5, r3
 8002abe:	fb03 5711 	mls	r7, r3, r1, r5
 8002ac2:	5dc7      	ldrb	r7, [r0, r7]
 8002ac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ac8:	462f      	mov	r7, r5
 8002aca:	42bb      	cmp	r3, r7
 8002acc:	460d      	mov	r5, r1
 8002ace:	d9f4      	bls.n	8002aba <_printf_i+0x112>
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d10b      	bne.n	8002aec <_printf_i+0x144>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	07df      	lsls	r7, r3, #31
 8002ad8:	d508      	bpl.n	8002aec <_printf_i+0x144>
 8002ada:	6923      	ldr	r3, [r4, #16]
 8002adc:	6861      	ldr	r1, [r4, #4]
 8002ade:	4299      	cmp	r1, r3
 8002ae0:	bfde      	ittt	le
 8002ae2:	2330      	movle	r3, #48	@ 0x30
 8002ae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002aec:	1b92      	subs	r2, r2, r6
 8002aee:	6122      	str	r2, [r4, #16]
 8002af0:	f8cd a000 	str.w	sl, [sp]
 8002af4:	464b      	mov	r3, r9
 8002af6:	aa03      	add	r2, sp, #12
 8002af8:	4621      	mov	r1, r4
 8002afa:	4640      	mov	r0, r8
 8002afc:	f7ff fee6 	bl	80028cc <_printf_common>
 8002b00:	3001      	adds	r0, #1
 8002b02:	d14a      	bne.n	8002b9a <_printf_i+0x1f2>
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	b004      	add	sp, #16
 8002b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	4833      	ldr	r0, [pc, #204]	@ (8002be4 <_printf_i+0x23c>)
 8002b18:	2778      	movs	r7, #120	@ 0x78
 8002b1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	6831      	ldr	r1, [r6, #0]
 8002b22:	061f      	lsls	r7, r3, #24
 8002b24:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b28:	d402      	bmi.n	8002b30 <_printf_i+0x188>
 8002b2a:	065f      	lsls	r7, r3, #25
 8002b2c:	bf48      	it	mi
 8002b2e:	b2ad      	uxthmi	r5, r5
 8002b30:	6031      	str	r1, [r6, #0]
 8002b32:	07d9      	lsls	r1, r3, #31
 8002b34:	bf44      	itt	mi
 8002b36:	f043 0320 	orrmi.w	r3, r3, #32
 8002b3a:	6023      	strmi	r3, [r4, #0]
 8002b3c:	b11d      	cbz	r5, 8002b46 <_printf_i+0x19e>
 8002b3e:	2310      	movs	r3, #16
 8002b40:	e7ac      	b.n	8002a9c <_printf_i+0xf4>
 8002b42:	4827      	ldr	r0, [pc, #156]	@ (8002be0 <_printf_i+0x238>)
 8002b44:	e7e9      	b.n	8002b1a <_printf_i+0x172>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	f023 0320 	bic.w	r3, r3, #32
 8002b4c:	6023      	str	r3, [r4, #0]
 8002b4e:	e7f6      	b.n	8002b3e <_printf_i+0x196>
 8002b50:	4616      	mov	r6, r2
 8002b52:	e7bd      	b.n	8002ad0 <_printf_i+0x128>
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	6825      	ldr	r5, [r4, #0]
 8002b58:	6961      	ldr	r1, [r4, #20]
 8002b5a:	1d18      	adds	r0, r3, #4
 8002b5c:	6030      	str	r0, [r6, #0]
 8002b5e:	062e      	lsls	r6, r5, #24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	d501      	bpl.n	8002b68 <_printf_i+0x1c0>
 8002b64:	6019      	str	r1, [r3, #0]
 8002b66:	e002      	b.n	8002b6e <_printf_i+0x1c6>
 8002b68:	0668      	lsls	r0, r5, #25
 8002b6a:	d5fb      	bpl.n	8002b64 <_printf_i+0x1bc>
 8002b6c:	8019      	strh	r1, [r3, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6123      	str	r3, [r4, #16]
 8002b72:	4616      	mov	r6, r2
 8002b74:	e7bc      	b.n	8002af0 <_printf_i+0x148>
 8002b76:	6833      	ldr	r3, [r6, #0]
 8002b78:	1d1a      	adds	r2, r3, #4
 8002b7a:	6032      	str	r2, [r6, #0]
 8002b7c:	681e      	ldr	r6, [r3, #0]
 8002b7e:	6862      	ldr	r2, [r4, #4]
 8002b80:	2100      	movs	r1, #0
 8002b82:	4630      	mov	r0, r6
 8002b84:	f7fd fb4c 	bl	8000220 <memchr>
 8002b88:	b108      	cbz	r0, 8002b8e <_printf_i+0x1e6>
 8002b8a:	1b80      	subs	r0, r0, r6
 8002b8c:	6060      	str	r0, [r4, #4]
 8002b8e:	6863      	ldr	r3, [r4, #4]
 8002b90:	6123      	str	r3, [r4, #16]
 8002b92:	2300      	movs	r3, #0
 8002b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b98:	e7aa      	b.n	8002af0 <_printf_i+0x148>
 8002b9a:	6923      	ldr	r3, [r4, #16]
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	47d0      	blx	sl
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d0ad      	beq.n	8002b04 <_printf_i+0x15c>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	079b      	lsls	r3, r3, #30
 8002bac:	d413      	bmi.n	8002bd6 <_printf_i+0x22e>
 8002bae:	68e0      	ldr	r0, [r4, #12]
 8002bb0:	9b03      	ldr	r3, [sp, #12]
 8002bb2:	4298      	cmp	r0, r3
 8002bb4:	bfb8      	it	lt
 8002bb6:	4618      	movlt	r0, r3
 8002bb8:	e7a6      	b.n	8002b08 <_printf_i+0x160>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	47d0      	blx	sl
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d09d      	beq.n	8002b04 <_printf_i+0x15c>
 8002bc8:	3501      	adds	r5, #1
 8002bca:	68e3      	ldr	r3, [r4, #12]
 8002bcc:	9903      	ldr	r1, [sp, #12]
 8002bce:	1a5b      	subs	r3, r3, r1
 8002bd0:	42ab      	cmp	r3, r5
 8002bd2:	dcf2      	bgt.n	8002bba <_printf_i+0x212>
 8002bd4:	e7eb      	b.n	8002bae <_printf_i+0x206>
 8002bd6:	2500      	movs	r5, #0
 8002bd8:	f104 0619 	add.w	r6, r4, #25
 8002bdc:	e7f5      	b.n	8002bca <_printf_i+0x222>
 8002bde:	bf00      	nop
 8002be0:	08002d6d 	.word	0x08002d6d
 8002be4:	08002d7e 	.word	0x08002d7e

08002be8 <memmove>:
 8002be8:	4288      	cmp	r0, r1
 8002bea:	b510      	push	{r4, lr}
 8002bec:	eb01 0402 	add.w	r4, r1, r2
 8002bf0:	d902      	bls.n	8002bf8 <memmove+0x10>
 8002bf2:	4284      	cmp	r4, r0
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	d807      	bhi.n	8002c08 <memmove+0x20>
 8002bf8:	1e43      	subs	r3, r0, #1
 8002bfa:	42a1      	cmp	r1, r4
 8002bfc:	d008      	beq.n	8002c10 <memmove+0x28>
 8002bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c06:	e7f8      	b.n	8002bfa <memmove+0x12>
 8002c08:	4402      	add	r2, r0
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d100      	bne.n	8002c12 <memmove+0x2a>
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c1a:	e7f7      	b.n	8002c0c <memmove+0x24>

08002c1c <_sbrk_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d06      	ldr	r5, [pc, #24]	@ (8002c38 <_sbrk_r+0x1c>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fd fde4 	bl	80007f4 <_sbrk>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_sbrk_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_sbrk_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	20000200 	.word	0x20000200

08002c3c <memcpy>:
 8002c3c:	440a      	add	r2, r1
 8002c3e:	4291      	cmp	r1, r2
 8002c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c44:	d100      	bne.n	8002c48 <memcpy+0xc>
 8002c46:	4770      	bx	lr
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c52:	4291      	cmp	r1, r2
 8002c54:	d1f9      	bne.n	8002c4a <memcpy+0xe>
 8002c56:	bd10      	pop	{r4, pc}

08002c58 <_realloc_r>:
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5c:	4680      	mov	r8, r0
 8002c5e:	4615      	mov	r5, r2
 8002c60:	460c      	mov	r4, r1
 8002c62:	b921      	cbnz	r1, 8002c6e <_realloc_r+0x16>
 8002c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f7ff bc4b 	b.w	8002504 <_malloc_r>
 8002c6e:	b92a      	cbnz	r2, 8002c7c <_realloc_r+0x24>
 8002c70:	f7ff fbdc 	bl	800242c <_free_r>
 8002c74:	2400      	movs	r4, #0
 8002c76:	4620      	mov	r0, r4
 8002c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c7c:	f000 f81a 	bl	8002cb4 <_malloc_usable_size_r>
 8002c80:	4285      	cmp	r5, r0
 8002c82:	4606      	mov	r6, r0
 8002c84:	d802      	bhi.n	8002c8c <_realloc_r+0x34>
 8002c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002c8a:	d8f4      	bhi.n	8002c76 <_realloc_r+0x1e>
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	4640      	mov	r0, r8
 8002c90:	f7ff fc38 	bl	8002504 <_malloc_r>
 8002c94:	4607      	mov	r7, r0
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d0ec      	beq.n	8002c74 <_realloc_r+0x1c>
 8002c9a:	42b5      	cmp	r5, r6
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	bf28      	it	cs
 8002ca2:	4632      	movcs	r2, r6
 8002ca4:	f7ff ffca 	bl	8002c3c <memcpy>
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4640      	mov	r0, r8
 8002cac:	f7ff fbbe 	bl	800242c <_free_r>
 8002cb0:	463c      	mov	r4, r7
 8002cb2:	e7e0      	b.n	8002c76 <_realloc_r+0x1e>

08002cb4 <_malloc_usable_size_r>:
 8002cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cb8:	1f18      	subs	r0, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bfbc      	itt	lt
 8002cbe:	580b      	ldrlt	r3, [r1, r0]
 8002cc0:	18c0      	addlt	r0, r0, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
